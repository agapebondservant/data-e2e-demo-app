#@ load("@ytt:data", "data")
---
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: fraud-detection-amqp
spec:
  dependencies:
    - name: main-dep
      eventSourceName: amqp
      eventName: fraud-detection
  triggers:
    - template:
        name: amqp-workflow-trigger
        k8s:
          operation: create
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: random-forest-deploy-inference-workflow-
                annotations:
                  kapp.k14s.io/versioned: ""
                  kapp.k14s.io/nonce: ""
                  kapp.k14s.io/disable-wait: ""
              spec:
                securityContext:
                  runAsUser: 1000
                  fsGroup: 1000
                entrypoint: train
                onExit: exit-handler
                synchronization:
                  mutex:
                    name: fraud-detection
                templates:
                  - name: train
                    steps:
                      - - name: fetch-git-revision
                          template: fetch-git-metadata
                      - - name: deploy-inference
                          template: deploy-inference-db
                          arguments:
                            parameters:
                              - name: git_sha
                                value: "{{steps.fetch-git-revision.outputs.result}}"

                  - name: exit-handler
                    inputs:
                      parameters:
                        - name: user
                          value: #@ data.values.inference_user
                        - name: db_uri
                          value: #@ data.values.inference_db_uri
                        - name: external_secret_ref
                          value: #@ data.values.inference_external_secret_ref
                        - name: external_secret_ref_key
                          value: #@ data.values.inference_external_secret_ref_key
                    script:
                      image: liquibase/liquibase
                      env:
                        - name: HOST_PASSWORD
                          valueFrom:
                            secretKeyRef:
                              name: "{{inputs.parameters.external_secret_ref}}"
                              key: "{{inputs.parameters.external_secret_ref_key}}"
                      command: [ bash ]
                      source: |
                        liquibase releaseLocks \
                        --url="{{inputs.parameters.db_uri}}" \
                        --username="{{inputs.parameters.user}}" \
                        --password="${HOST_PASSWORD}";

                  - name: fetch-git-metadata
                    inputs:
                      artifacts:
                        - name: git-rev
                          path: /tmp
                          git:
                            repo: #@ data.values.git_repo
                            singleBranch: true
                            branch: #@ data.values.environment_name
                    container:
                      image: golang
                      command: [sh, -c]
                      securityContext:
                        runAsUser: 0
                        fsGroup: 1000
                      args: ["git config --global --add safe.directory /tmp; git rev-parse --short HEAD;"]
                      workingDir: /tmp

                  - name: deploy-inference-db
                    inputs:
                      artifacts:
                        - name: deploy-code-db
                          path: "{{inputs.parameters.script_shared_path}}"
                          git:
                            repo: #@ data.values.git_repo
                            singleBranch: true
                            branch: #@ data.values.environment_name
                        - name: training-input
                          path: /liquibase/sample.sql
                          s3:
                            endpoint: "{{inputs.parameters.shared_argo_artifact_server}}"
                            insecure: true
                            bucket: "{{inputs.parameters.shared_argo_artifact_server_bucket}}"
                            key: anomaly-detection/sample.tgz
                            accessKeySecret:
                              name: minio
                              key: accesskey
                            secretKeySecret:
                              name: minio
                              key: secretkey
                      parameters:
                        - name: user
                          value: #@ data.values.inference_user
                        - name: db_uri
                          value: #@ data.values.inference_db_uri
                        - name: shared_path
                          value: #@ data.values.inference_shared_path
                        - name: external_secret_ref
                          value: #@ data.values.inference_external_secret_ref
                        - name: external_secret_ref_key
                          value: #@ data.values.inference_external_secret_ref_key
                        - name: git_repo
                          value: #@ data.values.git_repo
                        - name: environment_name
                          value: #@ data.values.environment_name
                        - name: script_shared_path
                          value: #@ data.values.script_shared_path
                        - name: db_script
                          value: #@ data.values.inference_db_script
                        - name: db_schema
                          value: #@ data.values.inference_db_schema
                        - name: shell_script
                          value: #@ data.values.inference_db_shell_script
                        - name: shared_argo_artifact_server
                          value: #@ data.values.shared_argo_artifact_server
                        - name: shared_argo_artifact_server_bucket
                          value: #@ data.values.shared_argo_artifact_server_bucket
                        - name: git_sha
                    script:
                      image: liquibase/liquibase
                      env:
                        - name: HOST_PASSWORD
                          valueFrom:
                            secretKeyRef:
                              name: "{{inputs.parameters.external_secret_ref}}"
                              key: "{{inputs.parameters.external_secret_ref_key}}"
                      command: [ bash ]
                      source: |
                        set -e;

                        DB_SCHEMA="{{inputs.parameters.db_schema}}" \
                        SHARED_PATH="{{inputs.parameters.script_shared_path}}" \
                        DB_SCRIPT="{{inputs.parameters.db_script}}" \
                        "{{inputs.parameters.script_shared_path}}"/"{{inputs.parameters.shell_script}}";

                        liquibase executeSql \
                        --url="{{inputs.parameters.db_uri}}" \
                        --username="{{inputs.parameters.user}}" --password="${HOST_PASSWORD}" \
                        --sql="SELECT 'start'";

                        liquibase tag --tag={{inputs.parameters.git_sha}} \
                        --url="{{inputs.parameters.db_uri}}" \
                        --username="{{inputs.parameters.user}}" \
                        --password="${HOST_PASSWORD}";

                        liquibase update \
                        --changelog-file=changelog/"{{inputs.parameters.db_script}}" \
                        --url="{{inputs.parameters.db_uri}}" \
                        --username="{{inputs.parameters.user}}" \
                        --password="${HOST_PASSWORD}";

                        liquibase execute-sql \
                        --url="{{inputs.parameters.db_uri}}" \
                        --username="{{inputs.parameters.user}}" --password="${HOST_PASSWORD}" \
                        --sql="TRUNCATE TABLE rf_credit_card_transactions_importances; TRUNCATE TABLE rf_credit_card_transactions_inference_results; TRUNCATE TABLE rf_credit_card_transactions_model; TRUNCATE TABLE rf_credit_card_transactions_model_group; TRUNCATE TABLE rf_credit_card_transactions_model_summary;";

                        liquibase update \
                        --changeLogFile=sample.sql \
                        --url="{{inputs.parameters.db_uri}}" \
                        --username="{{inputs.parameters.user}}" \
                        --password="${HOST_PASSWORD}";

                        liquibase changeLogSync \
                        --changeLogFile=sample.sql \
                        --url="{{inputs.parameters.db_uri}}" \
                        --username="{{inputs.parameters.user}}" \
                        --password="${HOST_PASSWORD}";