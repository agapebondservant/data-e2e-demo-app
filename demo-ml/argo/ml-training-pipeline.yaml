#@ load("@ytt:data", "data")
---
apiVersion: argoproj.io/v1alpha1
kind: CronWorkflow
metadata:
  name: random-forest-train-workflow
  annotations:
    kapp.k14s.io/versioned: ""
    kapp.k14s.io/nonce: ""
    kapp.k14s.io/disable-wait: ""
spec:
  schedule: "*/1 * * * *"
  concurrencyPolicy: "Forbid"
  startingDeadlineSeconds: 0
  workflowSpec:
    securityContext:
      runAsUser: 1000
      fsGroup: 1000
    entrypoint: train
    onExit: exit-handler
    templates:
      - name: train
        steps:
          - - name: fetch-git-revision
              template: fetch-git-metadata
          - - name: run-training
              template: deploy-training-db
              arguments:
                parameters:
                  - name: git_sha
                    value: "{{steps.fetch-git-revision.outputs.result}}"
          - - name: publish-model
              template: run-training
              arguments:
                parameters:
                  - name: entrypoint
                    value: "./app/publish_randomforest_model.py"

      - name: fetch-git-metadata
        inputs:
          artifacts:
            - name: git-rev
              path: /src
              git:
                repo: #@ data.values.git_repo
                singleBranch: true
                branch: #@ data.values.environment_name
                depth: 1
        script:
          image: golang:1.10
          command: [ sh, -c ]
          source: |
            git rev-parse --short HEAD
          workingDir: /src

      - name: exit-handler
        inputs:
          parameters:
            - name: user
              value: #@ data.values.training_user
            - name: db_uri
              value: #@ data.values.training_db_uri
            - name: external_secret_ref
              value: #@ data.values.training_external_secret_ref
            - name: external_secret_ref_key
              value: #@ data.values.training_external_secret_ref_key
        script:
          image: liquibase/liquibase
          env:
            - name: HOST_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{inputs.parameters.external_secret_ref}}"
                  key: "{{inputs.parameters.external_secret_ref_key}}"
          command: [ bash ]
          source: |
            liquibase releaseLocks \
            --url="{{inputs.parameters.db_uri}}" \
            --username="{{inputs.parameters.user}}" \
            --password="${HOST_PASSWORD}";

      - name: deploy-training-db
        inputs:
          artifacts:
            - name: deploy-code-db
              path: "{{inputs.parameters.script_shared_path}}"
              git:
                repo: #@ data.values.git_repo
                singleBranch: true
                branch: #@ data.values.environment_name
          parameters:
            - name: user
              value: #@ data.values.training_user
            - name: db_uri
              value: #@ data.values.training_db_uri
            - name: shared_path
              value: #@ data.values.training_shared_path
            - name: external_secret_ref
              value: #@ data.values.training_external_secret_ref
            - name: external_secret_ref_key
              value: #@ data.values.training_external_secret_ref_key
            - name: git_repo
              value: #@ data.values.git_repo
            - name: environment_name
              value: #@ data.values.environment_name
            - name: script_shared_path
              value: #@ data.values.script_shared_path
            - name: db_script
              value: #@ data.values.training_db_script
            - name: db_schema
              value: #@ data.values.training_db_schema
            - name: shell_script
              value: #@ data.values.training_db_shell_script
            - name: shared_argo_artifact_server
              value: #@ data.values.shared_argo_artifact_server
            - name: shared_argo_artifact_server_bucket
              value: #@ data.values.shared_argo_artifact_server_bucket
            - name: git_sha
        outputs:
          artifacts:
            - name: training-output
              path: changelog/sample.sql
              s3:
                endpoint: "{{inputs.parameters.shared_argo_artifact_server}}"
                insecure: true
                bucket: "{{inputs.parameters.shared_argo_artifact_server_bucket}}"
                key: anomaly-detection/sample.tgz
                accessKeySecret:
                  name: minio
                  key: accesskey
                secretKeySecret:
                  name: minio
                  key: secretkey

        script:
          image: liquibase/liquibase
          mirrorVolumeMounts: true
          env:
            - name: HOST_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "{{inputs.parameters.external_secret_ref}}"
                  key: "{{inputs.parameters.external_secret_ref_key}}"
          command: [bash]
          source: |
            set -e;

            DB_SCHEMA="{{inputs.parameters.db_schema}}" \
            SHARED_PATH="{{inputs.parameters.script_shared_path}}" \
            DB_SCRIPT="{{inputs.parameters.db_script}}" \
            "{{inputs.parameters.script_shared_path}}"/"{{inputs.parameters.shell_script}}";

            liquibase executeSql \
            --url="{{inputs.parameters.db_uri}}" \
            --username="{{inputs.parameters.user}}" --password="${HOST_PASSWORD}" \
            --sql="SELECT 'start'";

            liquibase tag --tag={{inputs.parameters.git_sha}} \
            --url="{{inputs.parameters.db_uri}}" \
            --username="{{inputs.parameters.user}}" \
            --password="${HOST_PASSWORD}";

            liquibase update \
            --changelog-file=changelog/"{{inputs.parameters.db_script}}" \
            --url="{{inputs.parameters.db_uri}}" \
            --username="{{inputs.parameters.user}}" \
            --password="${HOST_PASSWORD}";

            liquibase executeSql \
            --url="{{inputs.parameters.db_uri}}" \
            --username="{{inputs.parameters.user}}" --password="${HOST_PASSWORD}" \
            --sql="SELECT run_random_forest_training()";

            liquibase generateChangeLog \
            --logLevel=INFO \
            --changeLogFile=changelog/sample.sql \
            --url="{{inputs.parameters.db_uri}}" \
            --username="{{inputs.parameters.user}}" --password="${HOST_PASSWORD}" --diff-types="data" \
            --overwrite-output-file=true \
            --include-objects="rf_credit_card_transactions_importances, rf_credit_card_transactions_inference_results, rf_credit_card_transactions_model, rf_credit_card_transactions_model_group, rf_credit_card_transactions_model_summary, rf_model_versions";


      - name: run-training
        inputs:
          parameters:
            - name: entrypoint
            - name: model_name
              value: 'model'
            - name: shared_rabbit_secret
              value: #@ data.values.shared_rabbit_secret
            - name: shared_rabbit_host
              value: #@ data.values.shared_rabbit_host
        container:
          image: oawofolu/demo-ml-base
          command: [ python ]
          securityContext:
            runAsUser: 0
            fsGroup: 1000
          env:
            - name: rmq_user
              valueFrom:
                secretKeyRef:
                  name: "{{inputs.parameters.shared_rabbit_secret}}"
                  key: username
            - name: rmq_password
              valueFrom:
                secretKeyRef:
                  name: "{{inputs.parameters.shared_rabbit_secret}}"
                  key: password
            - name: rmq_host
              value: "{{inputs.parameters.shared_rabbit_host}}"
          args:
            - "{{inputs.parameters.entrypoint}}"

